{"version":3,"sources":["components/TriviaQuestion.js","components/TriviaMain.js","components/ResultMessage.js","components/ResultPage.js","App.js","constants/routes.js","index.js"],"names":["TriviaQuestion","question","correct","incorrect","updateScore","count","entities","Entities","require","AllHtmlEntities","useState","chosen","setChosen","allAnswers","sort","reverse","useEffect","length","Math","random","handleOnClick","e","target","style","border","value","className","decode","map","el","index","type","disabled","onClick","TriviaMain","questions","setQuestions","score","setScore","totalPointsPool","setTotalPointsPool","answersGiven","setAnswersGiven","sessionToken","setSessionToken","isLoading","setIsLoading","error","setError","history","useHistory","response_code","localStorage","removeItem","getItem","JSON","parse","token","fetch","then","response","json","res","setItem","stringify","mounted","handleChangeScore","prev","countAnswers","role","onSubmit","preventDefault","push","pathname","state","finalScore","maxScore","setTimeout","results","correct_answer","incorrect_answers","ResultMessage","pointsPercentage","ResultPage","props","location","App","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64cdb2b9.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nconst TriviaQuestion = ({question, correct, incorrect, updateScore, count}) => {\n    const Entities = require('html-entities').AllHtmlEntities;\n    const entities = new Entities();\n    const [chosen, setChosen] = useState(false);\n\n    let allAnswers = [correct, ...incorrect]\n        .sort()\n        .reverse();\n    //Making sure the order of answers is always the same for True/False questions\n\n    useEffect(() => {\n        setChosen(false);\n        if (allAnswers.length > 2) {\n            allAnswers.sort(() => {\n                return 0.5 - Math.random()\n            });\n        }\n        //shuffling answers if there are more than 2, so the right one isn't always in the same place\n    }, [])\n\n\n    const handleOnClick = (e) => {\n        setChosen(true);\n        count();\n        e.target.style.border = \"1px solid yellow\";\n        if (e.target.value === correct) {\n            updateScore();\n        }\n    }\n\n\n    return (\n        <div className=\"trivia__questions-item\">\n            <h3 className=\"text-light\">{entities.decode(question)}</h3>\n            {allAnswers.map((el, index) => {\n                return <button\n                    type=\"button\"\n                    disabled={chosen}\n                    className={\n                        chosen ?\n                            el === correct ? \"btn btn-success\" : \"btn btn-danger\"\n                            : \"btn btn-light\"\n                    }\n                    value={el} onClick={handleOnClick} key={index}>{entities.decode(el)}</button>\n            })}\n        </div>\n    );\n};\n\nexport default TriviaQuestion;\n","import React, {useEffect, useState} from 'react';\nimport {useHistory} from \"react-router-dom\";\nimport TriviaQuestion from \"./TriviaQuestion\";\n\nconst TriviaMain = () => {\n    const [questions, setQuestions] = useState(null);\n    const [score, setScore] = useState(0);\n    const [totalPointsPool, setTotalPointsPool] = useState(null);\n    const [answersGiven, setAnswersGiven] = useState(0);\n    const [sessionToken, setSessionToken] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const history = useHistory();\n\n\n    useEffect(() => {\n        if (questions && questions.response_code === 3) {\n            localStorage.removeItem(\n                \"sessionInfo\",\n            )\n        }\n        if (localStorage.getItem(\"sessionInfo\") !== null) {\n            setSessionToken(\n                JSON.parse(localStorage.getItem(\"sessionInfo\")).token)\n        } else {\n            fetch(\"https://opentdb.com/api_token.php?command=request\").then(response =>\n                response.json().then(res => {\n                    setSessionToken(res.token);\n                    localStorage.setItem(\n                        \"sessionInfo\",\n                        JSON.stringify({\n                            token: res.token,\n                        })\n                    );\n                })\n            )\n        }\n    }, [questions])\n\n\n    useEffect(() => {\n        let mounted = true;\n        setTotalPointsPool(10);\n        fetch(`https://opentdb.com/api.php?amount=10&category=15&token=${sessionToken}`).then(response =>\n            response.json().then(res => {\n                    if (mounted) {\n                        setIsLoading(false);\n                        setQuestions(res);\n                    }\n                }\n            ))\n\n        return () => {\n            mounted = false;\n        }\n\n    }, [sessionToken])\n\n    const handleChangeScore = () => {\n        setScore(prev => prev + 1);\n    }\n\n    const countAnswers = () => {\n        setAnswersGiven(prev => prev + 1);\n    }\n\n    const validate = () => {\n        return answersGiven === totalPointsPool;\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setError(false);\n        let allQuestionsAnswered = validate();\n        if (allQuestionsAnswered) {\n            history.push({\n                pathname: \"/results\",\n                state: {finalScore: score, maxScore: totalPointsPool}\n            })\n        } else {\n            setError(true);\n            setTimeout(() => {\n                setError(false);\n            }, 3000);\n        }\n        //could probably use a class to add a fade animation\n    }\n\n    return (\n        <div className=\"trivia\">\n            <div className=\"trivia__header navbar sticky-top\">\n                <h1 className=\"trivia__header-title\">Game Trivia!</h1>\n                <h2 className=\"trivia__header-score\">Current score: {score}/{totalPointsPool}</h2>\n            </div>\n            {isLoading ?\n                <div className=\"d-flex justify-content-center\">\n                    <div className=\"spinner-border text-warning m-5\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n                :\n                <div className=\"trivia__questions container\">\n                    <form onSubmit={handleSubmit}>\n                        {questions && questions.results.map((el, index) => {\n                            return <TriviaQuestion key={index} question={el.question} correct={el.correct_answer}\n                                                   incorrect={el.incorrect_answers} updateScore={handleChangeScore}\n                                                   count={countAnswers}/>\n                        })}\n                        <div className=\"trivia__controls\">\n                            {error && answersGiven < 10 &&\n                            <div className=\"alert alert-danger trivia__controls-error\" role=\"alert\">\n                                Please answer all of the questions!\n                            </div>}\n                            <button type=\"submit\" className=\"btn btn-dark\">Finish</button>\n                        </div>\n                    </form>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default TriviaMain;\n","import React from 'react';\n\nconst ResultMessage = ({score, maxScore}) => {\n    const pointsPercentage = (score/100) * maxScore;\n\n    const message = () => {\n        if(pointsPercentage <= 0.4) {\n            return \"It appears you need to play more video games!\"\n        } else if (pointsPercentage <= 0.7) {\n            return \"Not bad! That's a very decent score!\"\n        } else if (pointsPercentage <= 0.9) {\n            return \"Great score! You've played a lot of games in your life!\"\n        } else if (pointsPercentage === 1) {\n            return \"Wow, a perfect score! Congratulations, but you should probably go out more!\"\n        }\n    }\n\n    return (\n        <div className=\"results__content-message\">\n            <p className=\"display-4\">{message()}</p>\n        </div>\n    );\n};\n\nexport default ResultMessage;\n","import React from 'react';\nimport {useHistory} from \"react-router-dom\";\nimport ResultMessage from \"./ResultMessage\";\n\nconst ResultPage = (props) => {\n    const history = useHistory();\n    const finalScore = props.location.state.finalScore;\n    const totalPointsPool = props.location.state.maxScore;\n    const playAgain = () => {\n        history.push(\"/\")\n    }\n\n    return (\n        <div className=\"results\">\n            <div className=\"container results__content\">\n                <h1 className=\"display-2\">You got <span\n                    className=\"text-warning\">{finalScore}</span> {finalScore !== 1 ? \"points\" : \"point\"}</h1>\n                <ResultMessage score={finalScore} maxScore={totalPointsPool}/>\n                <button className=\"btn btn-lg btn-dark\" onClick={playAgain}>Play again</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ResultPage;\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport * as ROUTES from \"./constants/routes\";\nimport TriviaMain from \"./components/TriviaMain\";\nimport ResultPage from \"./components/ResultPage\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <BrowserRouter basename=\"/trivia\">\n            <Switch>\n                <Route exact path={ROUTES.HOME} component={TriviaMain}/>\n                <Route path={ROUTES.RESULTS} component={ResultPage}/>\n            </Switch>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","export const HOME = \"/\";\nexport const RESULTS = \"/results\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./scss/main.scss\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}